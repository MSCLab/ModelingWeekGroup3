import sys
import time
import os
import numpy as np

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QCheckBox, QGridLayout, QGroupBox,
                             QMenu, QPushButton, QRadioButton, QVBoxLayout, QWidget, QSlider, QComboBox,
    QLabel, QLineEdit, QHBoxLayout)
from PyQt5 import QtWidgets



import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvas
from matplotlib.figure import Figure
from glob import glob
from netCDF4 import Dataset
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.pyplot import figure


def multidim_intersect(arr1, arr2):
    arr1_view = arr1.view([('',arr1.dtype)]*arr1.shape[1])
    arr2_view = arr2.view([('',arr2.dtype)]*arr2.shape[1])
    intersected = np.intersect1d(arr1_view, arr2_view)
    return intersected.view(arr1.dtype).reshape(-1, arr1.shape[1])
    #return intersected

class ApplicationWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self._main = QWidget()
        self.setCentralWidget(self._main)
        self.setGeometry(10, 60, 1500, 800)
        layout = QVBoxLayout(self._main)
        self.var = QComboBox();
        self.fillVars()
        
        
        layout.addWidget(self.var)
        self.times = {}
        self.get_times()
        self.x, self.y, self.alt = self.get_axes_and_alt()
        limits = QHBoxLayout(self._main)
        limits.addStretch(0)
        
        self.timeLabel = QLabel()
        self.timeLabel.setText(self.times[sorted(self.times.keys())[0]])
        limits.addWidget(self.timeLabel, stretch=1)
        
        self.clear = QPushButton()
        self.clear.setText('clear')
        limits.addWidget(self.clear)
        
        descrip = QLabel()
        descrip.setText('Enter range of values for visualisation. First min then max. will be multiplied by 10^-6')
        self.limitmin = QLineEdit()
        self.limitmax = QLineEdit()
        self.limitmin.setText('0')
        self.limitmax.setText('1')
        limits.addWidget(descrip)
        limits.addWidget(self.limitmin)
        limits.addWidget(self.limitmax)
        layout.addLayout(limits)

        botLayout = QHBoxLayout(self._main)
        
        self.sl_time = QSlider(Qt.Horizontal)
        self.sl_time.setMinimum(0)
        self.sl_time.setMaximum(len(self.times.keys())-1)
        self.sl_time.setValue(0)
        self.sl_time.setTickPosition(QSlider.TicksBelow)
        self.sl_time.setTickInterval(1)
        self.sl_time.valueChanged.connect(self.valuechange_time)
        botLayout.addWidget(self.sl_time)


        self.updateButton = QPushButton()
        self.updateButton.setText('Update')
        self.updateButton.clicked.connect(self.update_plot)
        botLayout.addWidget(self.updateButton)
        layout.addLayout(botLayout)
        


#         self.fig = Figure(figsize = (5,5), dpi = 100)
#         self.ax = self.fig.add_subplot(1,1,1)# projection='3d')
#         self.canvas = FigureCanvasTkAgg(self.fig)
#         self.canvas.draw()
        self.fig = figure()
        self.canvas = FigureCanvas(self.fig)
        layout.addWidget(self.canvas)
        self.ax = self.fig.add_subplot(111, projection='3d')

        
        self.clear.clicked.connect(self.ax.clear)

        self.setLayout(layout)
        self.setWindowTitle("Visualisation demo")

    
    def getLimits(self):
        return (float(self.limitmin.text().replace(',', '.')), float(self.limitmax.text().replace(',', '.')))
    
    def fillVars(self):
        dataset = Dataset(glob("*")[0])
        vars = list(dataset.variables.keys())
        vars.remove('lat')
        vars.remove('alt')
        vars.remove('time')
        vars.remove('lon')
        self.var.addItems(vars)
        self.var.setCurrentText('pv')
        
    def variableChanged(self):
        if not self.blockChanges:
            self.blockChanges = True
            self.update_plot()
        
    
    def valuechange_time(self):
        self.timeLabel.setText(self.times[sorted(self.times.keys())[self.sl_time.value()]])
        
    def update_plot(self):
        dataset = Dataset(self.times[sorted(self.times.keys())[self.sl_time.value()]])
        minval, maxval = self.getLimits()
        curTime = list(dataset.variables['time']).index(sorted(self.times.keys())[self.sl_time.value()])
        #curTime = 0;
        pv = dataset.variables[self.var.currentText()][curTime]
        dataset.close()
#
#         a_alt, a_lat, a_lon = np.where(pv>minval*10**-6)
#         b_alt, b_lat, b_lon = np.where(pv<maxval*10**-6)
#          
#         a_complete = np.hstack((a_alt.reshape(a_alt.size, 1), a_lat.reshape(a_alt.size, 1), a_lon.reshape(a_alt.size, 1)))
#         b_complete = np.hstack((b_alt.reshape(b_alt.size, 1), b_lat.reshape(b_alt.size, 1), b_lon.reshape(b_alt.size, 1)))
#          
#         points = multidim_intersect(a_complete, b_complete)
        a_alt, a_lat, a_lon = np.where((pv>minval*10**-6) & (pv<maxval*10**-6))
        points = np.hstack((a_alt.reshape(a_alt.size, 1), a_lat.reshape(a_alt.size, 1), a_lon.reshape(a_alt.size, 1)))
        
        #self.ax.clear()
        z = [self.alt[i[0]] for i in points]
        y = [self.y[i[1]] for i in points]
        x = [self.x[i[2]] for i in points]
        print(len(x))
#         x=[322, 309, 321, 357, 665, 363, 292, 319, 329, 672, 671, 368, 402, 594, 298, 386, 358, 295, 353, 373, 353, 629, 407, 414, 399, 390, 393, 391, 323, 303, 528, 319, 577, 366, 298, 340, 377, 654, 647, 342, 341, 389, 612, 414, 645, 370, 301, 292, 293, 406, 581, 349, 576, 337, 343, 407, 400, 569, 305, 415, 412, 672, 338, 676, 577, 326, 348, 351, 414, 396, 688, 334, 328, 643, 619, 617, 632, 630, 627, 282, 283, 681, 677, 676, 671, 308, 667, 672, 664, 428, 623, 427, 397, 280, 654, 611, 159, 625, 360, 673, 693, 569, 437, 685, 302, 678, 320, 439, 440, 436, 367, 419, 608, 619, 275, 574, 381, 388, 382, 574, 351, 661, 687, 444, 690, 678, 445, 371, 303, 635, 638, 255, 708, 255, 702, 685, 690, 421, 456, 651, 607, 684, 693, 691, 665, 335, 360, 343, 437, 458, 445, 558, 699, 630, 635, 682, 630, 399, 346, 331, 282, 392, 396, 465, 482, 480, 233, 708, 555, 571, 682, 379, 575, 621, 243, 632, 324, 457, 337, 463, 476, 430, 501, 492, 675, 701, 205, 683, 683, 671, 328, 372, 666, 394, 505, 684, 691, 689, 213, 393, 161, 169, 586, 461, 142, 462, 463, 480, 403, 501, 509, 198, 111, 107, 217, 675, 209, 210, 386, 172, 642, 501, 499, 91, 701, 142, 555, 469, 585, 156, 156, 638, 436, 528, 535, 449, 452, 518, 454, 500, 487, 480, 411, 456, 396, 707, 708, 707, 708, 110, 705, 706, 462, 562, 562, 692, 707, 707, 726, 701, 621, 650, 697, 156, 676, 682, 710, 709, 438, 539, 442, 766, 530, 743, 504, 392, 569, 570, 579, 723, 742, 680, 710, 676, 126, 668, 660, 716, 672, 515, 684, 538, 369, 728, 438, 191, 735, 740, 742, 728, 723, 188, 747, 146, 175, 181, 667, 418, 580, 581, 760, 362, 31, 736, 221, 485, 587, 625, 294, 746, 154, 133, 767, 641, 747, 142, 629, 632, 405, 541, 419, 420, 418, 354, 323, 674, 393, 396, 382, 406, 493, 455, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 417, 429, 53, 752, 574, 589, 740, 742, 293, 615, 633, 126, 322, 672, 116, 638, 124, 631, 256, 422, 367, 583, 227, 195, 226, 310, 233, 232, 204, 216, 665, 318, 356, 744, 749, 661, 674, 487, 439, 529, 465, 31, 578, 761, 107, 123, 125, 534, 353, 746, 636, 195, 249, 257, 683, 425, 230, 127, 217, 202, 306, 298, 306, 671, 226, 302, 661, 189, 514, 243, 404, 592, 601, 561, 530, 262, 226, 760, 768, 36, 225, 240, 88, 595, 519, 613, 130, 207, 606, 733, 748, 746, 608, 599, 738, 226, 213, 544, 666, 174, 516, 353, 467, 196, 476, 395, 288, 281, 300, 301, 486, 563, 424, 495, 336, 295, 463, 531, 766, 500, 496, 114, 555, 560, 757, 733, 755, 579, 544, 740, 743, 82, 92, 724, 543, 156, 656, 284, 581, 271, 462, 463, 543, 503, 521, 371, 326, 346, 367, 588, 625, 730, 628, 599, 562, 339, 442, 524, 528, 53, 550, 549, 522, 769, 250, 230, 43, 762, 536, 567, 624, 745, 408, 410, 270, 239, 254, 68, 676, 70, 553, 609, 546, 678, 671, 673, 681, 544, 654, 145, 585, 151, 505, 502, 324, 340, 481, 648, 574, 580, 626, 743, 637, 424, 712, 547, 39, 752, 532, 531, 749, 200, 78, 615, 737, 122, 655, 658, 692, 109, 643, 137, 136, 144, 145, 628, 483, 431, 222, 584, 542, 707, 713, 468, 619, 620, 616, 717, 733, 710, 703, 642, 674, 651, 686, 243, 695, 228, 208, 529, 461, 445, 505, 519, 559, 230, 548, 733, 212, 540, 535, 576, 541, 190, 256, 643, 658, 244, 551, 677, 664, 397, 544, 390, 655, 120, 137, 577, 631, 156, 175, 186, 641, 215, 233, 527, 519, 504, 715, 656, 622, 733, 722, 631, 694, 107, 383, 389, 394, 389, 694, 271, 156, 191, 423, 48, 492, 493, 537, 543, 546, 228, 749, 754, 516, 521, 35, 364, 366, 753, 581, 745, 399, 733, 177, 546, 681, 251, 670, 296, 547, 112, 272, 133, 133, 647, 428, 457, 693, 640, 674, 627, 54, 639, 414, 645, 679, 534, 48, 275, 100, 116, 503, 753, 514, 211, 521, 750, 751, 610, 273, 409, 669, 557, 94, 259, 100, 590, 249, 157, 683, 592, 442, 594, 352, 436, 143, 301, 164, 264, 276, 604, 97, 377, 448, 183, 190, 273, 276, 430, 376, 125, 584, 317, 328, 518, 466, 49, 226, 539, 62, 64, 539, 513, 549, 214, 521, 556, 95, 587, 402, 603, 86, 547, 79, 631, 69, 118, 118, 600, 635, 647, 148, 213, 214, 237, 536, 263, 416, 64, 492, 83, 101, 464, 318, 441, 597, 250, 287, 376, 140, 111, 112, 281, 521, 480, 52, 539, 297, 241, 253, 214, 557, 37, 84, 87, 53, 286, 245, 613, 58, 83, 70, 59, 60, 114, 631, 75, 86, 123, 641, 585, 586, 406, 466, 359, 389, 382, 71, 72, 73, 74, 77, 370, 76, 77, 78, 331, 241, 306, 457, 458, 459, 347, 48, 526, 528, 476, 54, 111, 338, 339, 610, 574, 396, 321, 262, 271, 609, 53, 605, 50, 47, 65, 47, 56, 104, 615, 609, 47, 50, 63, 77, 646, 97, 107, 82, 366, 439, 237, 412, 338, 348, 266, 260, 329, 526, 527, 47, 239, 251, 287, 600, 601, 92, 84, 31, 31, 71, 69, 654, 78, 456, 436, 470, 45, 53, 520, 524, 537, 580, 44, 276, 263, 74, 39, 40, 41, 52, 650, 139, 142, 182, 281, 162, 507, 414, 523, 475, 485, 45, 299, 556, 590, 394, 605, 257, 256, 257, 611, 635, 273, 265, 71, 89, 93, 209, 383, 512, 466, 500, 259, 306, 334, 328, 589, 610, 405, 616, 619, 619, 325, 297, 400, 605, 103, 102, 74, 108, 46, 165, 490, 521, 52, 284, 274, 293, 248, 606, 36, 402, 289, 322, 415, 611, 269, 621, 107, 46, 503, 332, 295, 399, 608, 138, 241, 260, 270, 287, 303, 316, 130, 612, 80, 103, 501, 462, 286, 261, 341, 618, 626, 609, 524, 283, 169, 226, 227, 228, 146, 623, 318, 314, 83, 82, 77, 587, 183, 195, 196, 226, 267, 270, 455, 483, 146, 74, 421, 233, 300, 235, 240, 241, 453, 655, 656, 135, 65, 76, 433, 330, 115, 123, 416, 425, 475, 352, 109, 683, 305, 681, 682, 685, 689, 295, 64, 77, 75, 132, 712, 715, 430, 307, 279, 66, 486, 656, 58, 685, 247, 702, 691, 209, 757, 432, 680, 405, 397, 402, 424, 154, 186, 165, 161, 254, 212, 220, 84, 633, 55, 324, 610, 113, 606, 553, 533, 98, 152, 152, 739, 747, 706, 184, 741, 731, 610, 742, 467, 60, 253, 762, 411, 624, 67, 108, 622, 732, 405, 276, 225, 448, 436]
#         y=[53, 55, 59, 59, 83, 70, 58, 66, 69, 85, 86, 105, 130, 135, 61, 66, 78, 80, 93, 94, 103, 106, 115, 124, 135, 137, 137, 52, 67, 68, 70, 72, 74, 80, 85, 92, 93, 95, 96, 97, 98, 98, 105, 112, 120, 130, 53, 69, 73, 73, 73, 85, 92, 104, 115, 132, 63, 63, 64, 65, 79, 80, 82, 85, 86, 89, 89, 93, 94, 95, 95, 96, 106, 120, 54, 59, 62, 63, 64, 66, 68, 73, 76, 77, 83, 87, 87, 106, 109, 117, 117, 131, 141, 59, 59, 60, 64, 65, 76, 77, 89, 92, 96, 99, 101, 105, 111, 120, 120, 121, 131, 143, 64, 65, 67, 71, 78, 82, 85, 87, 92, 93, 95, 100, 100, 103, 124, 138, 54, 69, 69, 73, 75, 77, 84, 93, 99, 150, 192, 66, 69, 70, 80, 87, 89, 90, 91, 128, 154, 173, 193, 65, 68, 77, 77, 77, 79, 84, 95, 97, 103, 153, 164, 169, 175, 213, 55, 56, 58, 64, 74, 77, 83, 89, 90, 109, 123, 134, 135, 143, 153, 194, 203, 216, 59, 61, 79, 83, 85, 89, 96, 97, 107, 175, 198, 65, 71, 76, 78, 81, 85, 89, 97, 99, 103, 121, 121, 135, 182, 182, 216, 56, 59, 60, 64, 71, 85, 85, 87, 93, 118, 224, 229, 56, 67, 72, 76, 97, 99, 115, 116, 120, 205, 213, 218, 223, 237, 237, 242, 243, 250, 253, 257, 257, 260, 53, 53, 54, 63, 64, 71, 71, 78, 91, 94, 100, 100, 102, 103, 115, 117, 120, 124, 125, 129, 146, 161, 163, 214, 215, 224, 233, 238, 241, 251, 98, 98, 101, 104, 105, 112, 121, 121, 124, 126, 148, 152, 156, 163, 164, 173, 229, 261, 263, 265, 114, 114, 126, 126, 129, 138, 146, 160, 164, 167, 168, 191, 199, 209, 209, 211, 243, 54, 57, 104, 113, 120, 122, 128, 130, 145, 149, 155, 160, 161, 167, 175, 180, 190, 193, 202, 235, 236, 241, 253, 264, 268, 268, 275, 276, 340, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 344, 71, 77, 109, 110, 120, 121, 128, 134, 136, 145, 146, 148, 150, 159, 165, 185, 188, 229, 235, 235, 239, 248, 249, 249, 252, 253, 258, 261, 261, 268, 272, 289, 289, 336, 336, 337, 338, 58, 60, 64, 104, 106, 144, 144, 144, 156, 162, 162, 164, 174, 176, 181, 196, 208, 210, 211, 224, 229, 244, 245, 245, 248, 253, 257, 258, 259, 263, 277, 278, 319, 321, 329, 338, 339, 340, 58, 59, 95, 108, 115, 133, 134, 137, 139, 141, 149, 154, 155, 155, 156, 157, 164, 177, 192, 210, 212, 247, 257, 266, 270, 270, 271, 276, 279, 281, 284, 285, 285, 330, 331, 333, 333, 335, 336, 63, 69, 97, 114, 122, 171, 171, 175, 182, 186, 188, 196, 203, 203, 204, 211, 214, 217, 233, 242, 246, 254, 254, 258, 267, 267, 268, 277, 278, 288, 289, 289, 289, 304, 307, 323, 327, 330, 332, 333, 338, 61, 63, 82, 89, 91, 103, 107, 119, 125, 127, 128, 135, 177, 191, 191, 194, 196, 197, 198, 199, 207, 208, 209, 213, 215, 226, 230, 237, 237, 238, 241, 246, 250, 252, 263, 270, 289, 291, 292, 293, 293, 296, 298, 299, 313, 315, 327, 328, 333, 156, 162, 167, 168, 176, 177, 181, 186, 192, 200, 203, 208, 211, 232, 242, 262, 266, 276, 276, 276, 280, 282, 286, 286, 289, 290, 294, 296, 296, 296, 297, 300, 308, 310, 314, 316, 317, 318, 318, 319, 322, 326, 332, 334, 335, 341, 105, 115, 122, 150, 152, 164, 170, 175, 184, 184, 187, 196, 199, 201, 209, 216, 217, 223, 231, 232, 232, 233, 233, 241, 254, 260, 260, 279, 281, 282, 282, 285, 287, 295, 297, 299, 299, 301, 305, 307, 308, 311, 314, 318, 318, 318, 318, 319, 323, 324, 332, 332, 336, 57, 71, 71, 75, 89, 97, 130, 138, 148, 152, 156, 158, 170, 171, 172, 176, 185, 191, 197, 207, 211, 214, 216, 216, 225, 235, 242, 250, 252, 256, 278, 290, 290, 292, 293, 295, 299, 307, 317, 324, 330, 332, 334, 99, 117, 125, 128, 132, 141, 150, 151, 164, 177, 177, 181, 182, 202, 215, 223, 224, 227, 237, 281, 284, 286, 290, 294, 298, 303, 305, 305, 309, 310, 311, 311, 311, 311, 313, 315, 315, 316, 316, 316, 316, 316, 319, 326, 337, 340, 342, 342, 60, 99, 143, 143, 146, 146, 146, 149, 162, 163, 164, 168, 179, 184, 197, 204, 224, 224, 243, 256, 262, 269, 270, 273, 275, 282, 290, 295, 295, 297, 298, 299, 300, 301, 302, 304, 305, 305, 312, 312, 313, 314, 314, 323, 326, 327, 327, 339, 54, 67, 69, 99, 133, 134, 153, 158, 162, 168, 170, 178, 192, 195, 215, 221, 223, 242, 246, 258, 264, 266, 268, 277, 279, 282, 286, 292, 292, 308, 310, 311, 312, 318, 322, 322, 322, 322, 322, 322, 323, 323, 323, 324, 325, 325, 333, 333, 333, 338, 58, 59, 63, 69, 70, 132, 179, 180, 181, 183, 194, 200, 211, 219, 228, 231, 235, 239, 240, 240, 241, 246, 246, 259, 266, 271, 272, 277, 281, 286, 289, 292, 298, 299, 307, 309, 309, 320, 321, 324, 325, 335, 62, 63, 85, 130, 131, 140, 178, 178, 240, 242, 246, 247, 256, 283, 283, 284, 307, 331, 64, 67, 87, 123, 137, 151, 186, 191, 213, 232, 248, 280, 280, 280, 281, 281, 298, 298, 298, 302, 306, 331, 336, 68, 87, 101, 114, 142, 168, 190, 195, 204, 207, 209, 209, 210, 224, 238, 244, 251, 292, 293, 308, 330, 335, 74, 121, 137, 142, 154, 158, 192, 202, 203, 203, 204, 205, 210, 218, 226, 232, 255, 260, 261, 263, 286, 305, 335, 59, 70, 120, 121, 132, 145, 199, 202, 209, 212, 212, 215, 218, 236, 240, 264, 287, 127, 159, 164, 224, 227, 300, 307, 307, 117, 124, 132, 140, 187, 219, 255, 262, 323, 80, 147, 153, 204, 213, 222, 228, 242, 301, 302, 306, 306, 306, 200, 211, 217, 218, 242, 243, 247, 236, 299, 299, 299, 304, 305, 305, 64, 101, 200, 210, 242, 301, 301, 302, 302, 302, 67, 163, 163, 203, 204, 210, 242, 143, 204, 205, 238, 243, 97, 156, 167, 238, 250, 251, 251, 252, 252, 266, 169, 185, 190, 195, 204, 204, 234, 238, 282, 71, 87, 95, 131, 195, 196, 198, 208, 210, 212, 225, 241, 288, 289, 293, 293, 297, 299, 301, 308, 313, 321, 321, 58, 74, 97, 102, 110, 120, 123, 129, 138, 140, 148, 149, 156, 163, 175, 191, 191, 203, 214, 219, 223, 232, 232, 233, 253, 253, 264, 273, 292, 304, 314, 320, 322, 325, 328]
#         z=[13, 13, 13, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65]
        
        self.ax.scatter(x, y, z)
        #self.ax.set_zlim(0, 30000)
        


    def get_axes_and_alt(self):
        dataset = Dataset(glob('*')[0])
        x = np.array(dataset.variables['lon'])
        y = np.array(dataset.variables['lat'])
        alt = list(np.array(dataset.variables['alt']))
        alt.sort()
        dataset.close()
        return x, y, alt
    def get_times(self):
        for path in glob('*'):
            dataset = Dataset(path)
            for t in np.array(dataset.variables['time']):
                if t not in self.times.keys():
                    self.times[t] = path
            dataset.close()

    

os.chdir('D:\\My Docs\\ModelingWeek\\data')
#os.chdir('F://data/0216')

qapp = QtWidgets.QApplication(sys.argv)
app = ApplicationWindow()
app.show()
qapp.exec_()